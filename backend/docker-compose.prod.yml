version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: ride-share-backend-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - env.production
    environment:
      - NODE_ENV=production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
      - app_backups:/app/backups
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15-alpine
    container_name: ride-share-postgres-prod
    restart: unless-stopped
    env_file:
      - env.production
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./safety-schema.sql:/docker-entrypoint-initdb.d/02-safety-schema.sql
      - ./analytics-schema.sql:/docker-entrypoint-initdb.d/03-analytics-schema.sql
      - ./security-schema.sql:/docker-entrypoint-initdb.d/04-security-schema.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: ride-share-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Background Job Workers
  email-worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: ride-share-email-worker
    restart: unless-stopped
    env_file:
      - env.production
    environment:
      - NODE_ENV=production
      - WORKER_TYPE=email
    command: ["node", "workers/emailWorker.js"]
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
    networks:
      - app-network

  analytics-worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: ride-share-analytics-worker
    restart: unless-stopped
    env_file:
      - env.production
    environment:
      - NODE_ENV=production
      - WORKER_TYPE=analytics
    command: ["node", "workers/analyticsWorker.js"]
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
    networks:
      - app-network

  payment-worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: ride-share-payment-worker
    restart: unless-stopped
    env_file:
      - env.production
    environment:
      - NODE_ENV=production
      - WORKER_TYPE=payment
    command: ["node", "workers/paymentWorker.js"]
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
    networks:
      - app-network

  # Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ride-share-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: ride-share-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app-network

  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: fluentd
    volumes:
      - ./monitoring/fluentd/fluent.conf:/fluentd/etc/fluent.conf
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    environment:
      - FLUENT_ELASTICSEARCH_HOST=elasticsearch
      - FLUENT_ELASTICSEARCH_PORT=9200
    depends_on:
      - elasticsearch
    networks:
      - app-network
    ports:
      - "24224:24224"
      - "24224:24224/udp"

  elastalert:
    image: jertel/elastalert2:2.11.1
    container_name: elastalert
    volumes:
      - ./monitoring/elastalert/config.yaml:/opt/elastalert/config.yaml
      - ./monitoring/elastalert/rules:/opt/elastalert/rules
    depends_on:
      - elasticsearch
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_backups:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  es_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 